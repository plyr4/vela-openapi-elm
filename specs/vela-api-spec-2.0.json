{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for the Vela server",
    "title": "Vela server",
    "version": "0.23.2"
  },
  "host": "localhost",
  "paths": {
    "/api/v1/admin/build": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a build in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateBuild",
        "parameters": [
          {
            "description": "Payload containing build to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the build in the database",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "404": {
            "description": "Unable to update the build in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the build in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/admin/builds/queue": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all of the running and pending builds in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AllBuildsQueue",
        "parameters": [
          {
            "type": "string",
            "description": "Unix timestamp to limit builds returned",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all running and pending builds from the database",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildQueue"
              }
            }
          },
          "500": {
            "description": "Unable to retrieve all running and pending builds from the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/admin/clean": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update pending build resources to error status before a given time",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminCleanResources",
        "parameters": [
          {
            "type": "integer",
            "description": "filter pending resources created before a certain time",
            "name": "before",
            "in": "query",
            "required": true
          },
          {
            "description": "Payload containing error message",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated pending resources with error message"
          },
          "400": {
            "description": "Unable to update resources — bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unable to update resources — unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update resources",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/admin/deployment": {
      "put": {
        "description": "Get All (Not Implemented)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateDeployment",
        "responses": {
          "501": {
            "description": "This endpoint is not implemented",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/admin/hook": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a hook in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateHook",
        "parameters": [
          {
            "description": "Payload containing hook to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the hook in the database",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "404": {
            "description": "Unable to update the hook in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "Unable to update the hook in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/admin/repo": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a repo in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateRepo",
        "parameters": [
          {
            "description": "Payload containing repo to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the repo in the database",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "404": {
            "description": "Unable to update the repo in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "Unable to update the repo in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/admin/secret": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a secret in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateSecret",
        "parameters": [
          {
            "description": "Payload containing secret to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the secret in the database",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "404": {
            "description": "Unable to update the secret in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "Unable to update the secret in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/admin/service": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a hook in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateService",
        "parameters": [
          {
            "description": "Payload containing service to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the service in the database",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "404": {
            "description": "Unable to update the service in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the service in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/admin/step": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a step in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateStep",
        "parameters": [
          {
            "description": "Payload containing step to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Step"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the step in the database",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          "404": {
            "description": "Unable to update the step in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the step in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/admin/user": {
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a user in the database",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "AdminUpdateUser",
        "parameters": [
          {
            "description": "Payload containing user to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the user in the database",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Unable to update the user in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the user in the database",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/admin/workers/{worker}/register-token": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a worker registration token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "operationId": "RegisterToken",
        "parameters": [
          {
            "type": "string",
            "description": "Hostname of the worker",
            "name": "worker",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated registration token",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/deployments/{org}/{repo}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a list of deployments for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployments"
        ],
        "operationId": "ListDeployments",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of deployments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the list of deployments",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of deployments",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a deployment for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployments"
        ],
        "operationId": "CreateDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the deployment",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "description": "Unable to create the deployment",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the deployment",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/deployments/{org}/{repo}/{deployment}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a deployment from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployments"
        ],
        "operationId": "GetDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Number of the deployment",
            "name": "deployment",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the deployment",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "description": "Unable to retrieve the deployment",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the deployment",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/hooks/{org}/{repo}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve the webhooks for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "operationId": "ListHooks",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved webhooks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Webhook"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve webhooks",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve webhooks",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a webhook for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "operationId": "CreateHook",
        "parameters": [
          {
            "description": "Webhook payload that we expect from the user or VCS",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The webhook has been created",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "The webhook was unable to be created",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "The webhook was unable to be created",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/hooks/{org}/{repo}/{hook}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a webhook for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "operationId": "GetHook",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of the hook",
            "name": "hook",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the webhook",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "Unable to retrieve the webhook",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the webhook",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a webhook for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "operationId": "UpdateHook",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of the hook",
            "name": "hook",
            "in": "path",
            "required": true
          },
          {
            "description": "Webhook payload that we expect from the user or VCS",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the webhook",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "The webhook was unable to be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The webhook was unable to be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "The webhook was unable to be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a webhook for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "operationId": "DeleteHook",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of the hook",
            "name": "hook",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the webhook",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The webhook was unable to be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The webhook was unable to be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "The webhook was unable to be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/hooks/{org}/{repo}/{hook}/redeliver": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Redeliver a webhook from the SCM",
        "produces": [
          "application/json"
        ],
        "tags": [
          "webhook"
        ],
        "operationId": "RedeliverHook",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of the hook",
            "name": "hook",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully redelivered the webhook",
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          },
          "400": {
            "description": "The webhook was unable to be redelivered",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The webhook was unable to be redelivered",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "The webhook was unable to be redelivered",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{org}/{repo}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "List pipelines from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "pipelines"
        ],
        "operationId": "ListPipelines",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the pipelines",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pipeline"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the list of pipelines",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of pipelines",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a pipeline in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "pipelines"
        ],
        "operationId": "CreatePipeline",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the pipeline to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the pipeline",
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          },
          "400": {
            "description": "Unable to create the pipeline",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to create the pipeline",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the pipeline",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{org}/{repo}/{pipeline}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a pipeline from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "pipelines"
        ],
        "operationId": "GetPipeline",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Commit SHA for pipeline to retrieve",
            "name": "pipeline",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the pipeline",
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a pipeline in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "pipelines"
        ],
        "operationId": "UpdatePipeline",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Commit SHA for pipeline to update",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the pipeline to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the pipeline",
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          },
          "404": {
            "description": "Unable to update the pipeline",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the pipeline",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a pipeline from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "pipelines"
        ],
        "operationId": "DeletePipeline",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Commit SHA for pipeline to delete",
            "name": "pipeline",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the pipeline",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unable to delete the pipeline",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to delete the pipeline",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{org}/{repo}/{pipeline}/compile": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get, expand and compile a pipeline from the configured backend",
        "produces": [
          "application/x-yaml",
          "application/json"
        ],
        "tags": [
          "pipelines"
        ],
        "operationId": "CompilePipeline",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Commit SHA for pipeline to retrieve",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "json",
              "yaml"
            ],
            "type": "string",
            "default": "yaml",
            "description": "Output string for specifying output format",
            "name": "output",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved and compiled the pipeline",
            "schema": {
              "$ref": "#/definitions/PipelineBuild"
            }
          },
          "400": {
            "description": "Unable to validate the pipeline configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to retrieve the pipeline configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{org}/{repo}/{pipeline}/expand": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get and expand a pipeline from the configured backend",
        "produces": [
          "application/x-yaml",
          "application/json"
        ],
        "tags": [
          "pipelines"
        ],
        "operationId": "ExpandPipeline",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Commit SHA for pipeline to retrieve",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "json",
              "yaml"
            ],
            "type": "string",
            "default": "yaml",
            "description": "Output string for specifying output format",
            "name": "output",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved and expanded the pipeline",
            "schema": {
              "$ref": "#/definitions/PipelineBuild"
            }
          },
          "400": {
            "description": "Unable to expand the pipeline configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to retrieve the pipeline configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{org}/{repo}/{pipeline}/templates": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a map of templates utilized by a pipeline from the configured backend",
        "produces": [
          "application/x-yaml",
          "application/json"
        ],
        "tags": [
          "pipelines"
        ],
        "operationId": "GetTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Commit SHA for pipeline to retrieve",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "json",
              "yaml"
            ],
            "type": "string",
            "default": "yaml",
            "description": "Output string for specifying output format",
            "name": "output",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the map of pipeline templates",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "400": {
            "description": "Unable to retrieve the pipeline configuration templates",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to retrieve the pipeline configuration templates",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/pipelines/{org}/{repo}/{pipeline}/validate": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get, expand and validate a pipeline from the configured backend",
        "produces": [
          "application/x-yaml",
          "application/json"
        ],
        "tags": [
          "pipelines"
        ],
        "operationId": "ValidatePipeline",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Commit SHA for pipeline to retrieve",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "json",
              "yaml"
            ],
            "type": "string",
            "default": "yaml",
            "description": "Output string for specifying output format",
            "name": "output",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved, expanded and validated the pipeline",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unable to validate the pipeline configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to retrieve the pipeline configuration",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/queue/info": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get queue credentials",
        "produces": [
          "application/json"
        ],
        "tags": [
          "queue"
        ],
        "operationId": "Info",
        "responses": {
          "200": {
            "description": "Successfully retrieved queue credentials",
            "schema": {
              "$ref": "#/definitions/QueueInfo"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all repos in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "ListRepos",
        "parameters": [
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the repo",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repo"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a repo in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "CreateRepo",
        "parameters": [
          {
            "description": "Payload containing the repo to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the repo",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "400": {
            "description": "Unable to create the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Unable to create the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Unable to create the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unable to create the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all repos for the provided org in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "ListReposForOrg",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Filter active repos",
            "name": "active",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          },
          {
            "enum": [
              "name",
              "latest"
            ],
            "type": "string",
            "default": "name",
            "description": "How to sort the results",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the repo",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repo"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the org",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the org",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/builds": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a list of builds by org in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "ListBuildsForOrg",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "comment",
              "deployment",
              "pull_request",
              "push",
              "schedule",
              "tag"
            ],
            "type": "string",
            "description": "Filter by build event",
            "name": "event",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter builds by branch",
            "name": "branch",
            "in": "query"
          },
          {
            "enum": [
              "canceled",
              "error",
              "failure",
              "killed",
              "pending",
              "running",
              "success"
            ],
            "type": "string",
            "description": "Filter by build status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved build list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Build"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the list of builds",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of builds",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a repo in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "GetRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the repo",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a repo in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "UpdateRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the repo to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the repo",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "400": {
            "description": "Unable to update the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unable to update the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a repo in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "DeleteRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the repo",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to  deleted the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "510": {
            "description": "Unable to  deleted the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get builds from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "ListBuildsForRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "comment",
              "deployment",
              "pull_request",
              "push",
              "schedule",
              "tag"
            ],
            "type": "string",
            "description": "Filter by build event",
            "name": "event",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter builds based on the commit hash",
            "name": "commit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter builds by branch",
            "name": "branch",
            "in": "query"
          },
          {
            "enum": [
              "canceled",
              "error",
              "failure",
              "killed",
              "pending",
              "running",
              "success"
            ],
            "type": "string",
            "description": "Filter by build status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1,
            "description": "filter builds created before a certain time",
            "name": "before",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "filter builds created after a certain time",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the builds",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Build"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the list of builds",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of builds",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "CreateBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the build to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request processed but build was skipped",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Successfully created the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Unable to create the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to create the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "GetBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to retrieve",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Updates a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "UpdateBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to update",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the build to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "404": {
            "description": "Unable to update the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Restart a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "RestartBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to restart",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request processed but build was skipped",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Successfully restarted the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Unable to restart the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to restart the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to restart the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "DeleteBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to delete",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the build",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unable to delete the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to delete the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/approve": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Sign off on a build to run from an outside contributor",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "ApproveBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to retrieve",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request processed but build was skipped",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Successfully created the build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Unable to create the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to create the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/cancel": {
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Cancel a running build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "CancelBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to cancel",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully canceled the build",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unable to cancel build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to cancel build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to cancel build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/executable": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a build executable in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "GetBuildExecutable",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number to retrieve",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the build executable",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Could not retrieve build executable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/graph": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get directed a-cyclical graph for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "GetBuildGraph",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved graph for the build",
            "schema": {
              "$ref": "#/definitions/Graph"
            }
          },
          "401": {
            "description": "Unable to retrieve graph for the build — unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to retrieve graph for the build — not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve graph for the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/logs": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "List logs for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "ListLogsForBuild",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved logs for the build",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Log"
              }
            }
          },
          "500": {
            "description": "Unable to retrieve logs for the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/services": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a list of all services for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "ListServices",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of services",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Service"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the list of services",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of services",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a service for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "CreateService",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the service to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Unable to create the service",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the service",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/services/{service}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a service for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "GetService",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Name of the service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Unable to retrieve the service",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the service",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a service for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "UpdateService",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Service number",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the service to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the service",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Unable to update the service",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the service",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a service for a build in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "DeleteService",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Service Number",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the service",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete the service",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/services/{service}/logs": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve the logs for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "GetServiceLog",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Service number",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the service logs",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "500": {
            "description": "Unable to retrieve the service logs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update the logs for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "UpdateServiceLog",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Service number",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the log to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the service logs",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "400": {
            "description": "Unable to updated the service logs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to updates the service logs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create the logs for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "CreateServiceLog",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Service number",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the log to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the service logs"
          },
          "400": {
            "description": "Unable to create the service logs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the service logs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete the logs for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "services"
        ],
        "operationId": "DeleteServiceLog",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Service number",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the service logs",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete the service logs",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/steps": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a list of steps for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "ListSteps",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of steps",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Step"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the list of steps",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of steps",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a step for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "CreateStep",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the step to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Step"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the step",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          "400": {
            "description": "Unable to create the step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a step for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "GetStep",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Step number",
            "name": "step",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the step",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a step for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "UpdateStep",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Step number",
            "name": "step",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the step to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Step"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the step",
            "schema": {
              "$ref": "#/definitions/Step"
            }
          },
          "400": {
            "description": "Unable to update the step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a step for a build",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "DeleteStep",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Step number",
            "name": "step",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the step",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Successfully deleted the step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/steps/{step}/logs": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve the logs for a step",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "GetStepLog",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Step number",
            "name": "step",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the logs for step",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "500": {
            "description": "Unable to retrieve the logs for a step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update the logs for a step",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "UpdateStepLog",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Step number",
            "name": "step",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the log to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the logs for step",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "400": {
            "description": "Unable to update the logs for a step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the logs for a step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create the logs for a step",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "CreateStepLog",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Step number",
            "name": "step",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the log to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the logs for step"
          },
          "400": {
            "description": "Unable to create the logs for a step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the logs for a step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete the logs for a step",
        "produces": [
          "application/json"
        ],
        "tags": [
          "steps"
        ],
        "operationId": "DeleteStepLog",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Step number",
            "name": "step",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the logs for the step",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete the logs for the step",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/builds/{build}/token": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a build token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "GetBuildToken",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Build number",
            "name": "build",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved build token",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict (requested build token for build not in pending state)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to generate build token",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/chown": {
      "patch": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Change the owner of the webhook for a repo",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "ChownRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed the owner for the repo",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to change the owner for the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/repair": {
      "patch": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Remove and recreate the webhook for a repo",
        "produces": [
          "application/json"
        ],
        "tags": [
          "repos"
        ],
        "operationId": "RepairRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully repaired the repo",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to repair the repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/repos/{org}/{repo}/{schedule}": {
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a schedule in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedules"
        ],
        "operationId": "DeleteSchedule",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the schedule",
            "name": "schedule",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the schedule",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "510": {
            "description": "Unable to delete the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/schedules/{org}/{repo}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all schedules in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedules"
        ],
        "operationId": "ListSchedules",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the schedules",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Schedule"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the schedules",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the schedules",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a schedule in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedules"
        ],
        "operationId": "CreateSchedule",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the schedule to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the schedule",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          },
          "400": {
            "description": "Unable to create the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Unable to create the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Unable to create the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Unable to create the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/schedules/{org}/{repo}/{schedule}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a schedule in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedules"
        ],
        "operationId": "GetSchedule",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the schedule",
            "name": "schedule",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the schedule",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a schedule for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedules"
        ],
        "operationId": "UpdateSchedule",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the schedule",
            "name": "schedule",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the schedule to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the schedule",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          },
          "400": {
            "description": "Unable to update the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to update the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the schedule",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/scm/orgs/{org}/sync": {
      "patch": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Sync up repos from scm service and database in a specified org",
        "produces": [
          "application/json"
        ],
        "tags": [
          "scm"
        ],
        "operationId": "SyncReposForOrg",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully synchronized repos",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repo"
              }
            }
          },
          "204": {
            "description": "Successful request resulting in no change"
          },
          "301": {
            "description": "One repo in the org has moved permanently",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "User has been forbidden access to at least one repository in org",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to synchronize org repositories",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/scm/repos/{org}/{repo}/sync": {
      "patch": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Sync up scm service and database in the context of a specific repo",
        "produces": [
          "application/json"
        ],
        "tags": [
          "scm"
        ],
        "operationId": "SyncRepo",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully synchronized repo",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "204": {
            "description": "Successful request resulting in no change"
          },
          "301": {
            "description": "Repo has moved permanently",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "User has been forbidden access to repository",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to synchronize repo",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/search/builds/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get a single build by its id in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "builds"
        ],
        "operationId": "GetBuildByID",
        "parameters": [
          {
            "type": "number",
            "description": "build id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved build",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Unable to retrieve the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the build",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/secrets/{engine}/{type}/{org}/{name}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a list of secrets from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "operationId": "ListSecrets",
        "parameters": [
          {
            "type": "string",
            "description": "Secret engine to create a secret in, eg. \"native\"",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "org",
              "repo",
              "shared"
            ],
            "type": "string",
            "description": "Secret type to create",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of secrets",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Secret"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the list of secrets",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of secrets",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a secret",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "operationId": "CreateSecret",
        "parameters": [
          {
            "type": "string",
            "description": "Secret engine to create a secret in, eg. \"native\"",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "org",
              "repo",
              "shared"
            ],
            "type": "string",
            "description": "Secret type to create",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the secret to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "400": {
            "description": "Unable to create the secret",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the secret",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/secrets/{engine}/{type}/{org}/{name}/{secret}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a secret from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "operationId": "GetSecret",
        "parameters": [
          {
            "type": "string",
            "description": "Secret engine to create a secret in, eg. \"native\"",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "org",
              "repo",
              "shared"
            ],
            "type": "string",
            "description": "Secret type to create",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the secret",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "500": {
            "description": "Unable to retrieve the secret",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a secret on the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "operationId": "UpdateSecret",
        "parameters": [
          {
            "type": "string",
            "description": "Secret engine to update the secret in, eg. \"native\"",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "org",
              "repo",
              "shared"
            ],
            "type": "string",
            "description": "Secret type to update",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the secret",
            "name": "secret",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the secret to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "400": {
            "description": "Unable to update the secret",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the secret",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a secret from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "operationId": "DeleteSecret",
        "parameters": [
          {
            "type": "string",
            "description": "Secret engine to delete the secret from, eg. \"native\"",
            "name": "engine",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "org",
              "repo",
              "shared"
            ],
            "type": "string",
            "description": "Secret type to delete",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the org",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo if a repo secret, team name if a shared secret, or '*' if an org secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the secret",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the secret",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete the secret",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/user": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve the current authenticated user from the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "GetCurrentUser",
        "responses": {
          "200": {
            "description": "Successfully retrieved the current user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update the current authenticated user in the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "UpdateCurrentUser",
        "parameters": [
          {
            "description": "Payload containing the user to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the current user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to update the current user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to update the current user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the current user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/user/source/repos": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a list of repos for the current authenticated user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "GetSourceRepos",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of repos for the current user",
            "schema": {
              "$ref": "#/definitions/Repo"
            }
          },
          "404": {
            "description": "Unable to retrieve a list of repos for the current user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/user/token": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a token for the current authenticated user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "CreateToken",
        "responses": {
          "200": {
            "description": "Successfully created a token for the current user",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "503": {
            "description": "Unable to create a token for the current user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a token for the current authenticated user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "DeleteToken",
        "responses": {
          "200": {
            "description": "Successfully delete a token for the current user",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete a token for the current user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a list of users for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "ListUsers",
        "parameters": [
          {
            "type": "integer",
            "default": 1,
            "description": "The page of results to retrieve",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "type": "integer",
            "default": 10,
            "description": "How many results per page to return",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "see https://tools.ietf.org/html/rfc5988"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of results"
              }
            }
          },
          "400": {
            "description": "Unable to retrieve the list of users",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to retrieve the list of users",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a user for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "CreateUser",
        "parameters": [
          {
            "description": "Payload containing the user to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to create the user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/users/{user}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a user for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "GetUser",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the user",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Unable to retrieve the user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a user for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "UpdateUser",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the user",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "description": "Payload containing the user to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to update the user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to update the user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a user for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "users"
        ],
        "operationId": "DeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the user",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted of user",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Unable to delete user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to delete user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/workers": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a list of workers for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workers"
        ],
        "operationId": "ListWorkers",
        "parameters": [
          {
            "type": "boolean",
            "description": "Filter workers based on active status",
            "name": "active",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "filter workers that have checked in before a certain time",
            "name": "checked_in_before",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "filter workers that have checked in after a certain time",
            "name": "checked_in_after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of workers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Worker"
              }
            }
          },
          "500": {
            "description": "Unable to retrieve the list of workers",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a worker for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workers"
        ],
        "operationId": "CreateWorker",
        "parameters": [
          {
            "description": "Payload containing the worker to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Worker"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the worker and retrieved auth token",
            "schema": {
              "$ref": "#definitions/Token"
            }
          },
          "400": {
            "description": "Unable to create the worker",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to create the worker",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/workers/{worker}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Retrieve a worker for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workers"
        ],
        "operationId": "GetWorker",
        "parameters": [
          {
            "type": "string",
            "description": "Hostname of the worker",
            "name": "worker",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the worker",
            "schema": {
              "$ref": "#/definitions/Worker"
            }
          },
          "404": {
            "description": "Unable to retrieve the worker",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update a worker for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workers"
        ],
        "operationId": "UpdateWorker",
        "parameters": [
          {
            "description": "Payload containing the worker to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Worker"
            }
          },
          {
            "type": "string",
            "description": "Name of the worker",
            "name": "worker",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the worker",
            "schema": {
              "$ref": "#/definitions/Worker"
            }
          },
          "400": {
            "description": "Unable to update the worker",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to update the worker",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to update the worker",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete a worker for the configured backend",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workers"
        ],
        "operationId": "DeleteWorker",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the worker",
            "name": "worker",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted of worker",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Unable to delete worker",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/workers/{worker}/refresh": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Refresh authorization token for worker",
        "produces": [
          "application/json"
        ],
        "tags": [
          "workers"
        ],
        "operationId": "RefreshWorkerAuth",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the worker",
            "name": "worker",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed auth",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "400": {
            "description": "Unable to refresh worker auth",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to refresh worker auth",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to refresh worker auth",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/authenticate": {
      "get": {
        "description": "Start OAuth flow or exchange tokens",
        "produces": [
          "application/json"
        ],
        "tags": [
          "authenticate"
        ],
        "operationId": "GetAuthToken",
        "parameters": [
          {
            "type": "string",
            "description": "the code received after identity confirmation",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "description": "a random string",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the url where the user will be sent after authorization",
            "name": "redirect_uri",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully authenticated",
            "schema": {
              "$ref": "#/definitions/Token"
            },
            "headers": {
              "Set-Cookie": {
                "type": "string"
              }
            }
          },
          "307": {
            "description": "Redirected for authentication"
          },
          "401": {
            "description": "Unable to authenticate",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/authenticate/cli/{port}": {
      "get": {
        "description": "Authentication entrypoint that builds the right post-auth\nredirect URL for CLI authentication requests\nand redirects to /authenticate after",
        "produces": [
          "application/json"
        ],
        "tags": [
          "authenticate"
        ],
        "operationId": "GetAuthenticateTypeCLI",
        "parameters": [
          {
            "type": "integer",
            "description": "the port number",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the code received after identity confirmation",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "description": "a random string",
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "307": {
            "description": "Redirected for authentication"
          }
        }
      }
    },
    "/authenticate/token": {
      "post": {
        "description": "Authenticate to Vela via personal access token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "authenticate"
        ],
        "operationId": "PostAuthToken",
        "parameters": [
          {
            "type": "string",
            "description": "scopes: repo, repo:status, user:email, read:user, and read:org\n",
            "name": "Token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully authenticated",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "401": {
            "description": "Unable to authenticate",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/authenticate/web": {
      "get": {
        "description": "Authentication entrypoint that builds the right post-auth\nredirect URL for web authentication requests\nand redirects to /authenticate after",
        "produces": [
          "application/json"
        ],
        "tags": [
          "authenticate"
        ],
        "operationId": "GetAuthenticateTypeWeb",
        "parameters": [
          {
            "type": "string",
            "description": "the code received after identity confirmation",
            "name": "code",
            "in": "query"
          },
          {
            "type": "string",
            "description": "a random string",
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "307": {
            "description": "Redirected for authentication"
          }
        }
      }
    },
    "/badge/{org}/{repo}/status.svg": {
      "get": {
        "description": "Get a badge for the repo",
        "produces": [
          "image/svg+xml"
        ],
        "tags": [
          "base"
        ],
        "operationId": "GetBadge",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the org the repo belongs to",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the repo to get the badge for",
            "name": "repo",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a status Badge",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Check if the Vela API is available",
        "produces": [
          "application/json"
        ],
        "tags": [
          "base"
        ],
        "operationId": "Health",
        "responses": {
          "200": {
            "description": "Successfully 'ping'-ed Vela API",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "description": "Log into the Vela api",
        "tags": [
          "authenticate"
        ],
        "operationId": "GetLogin",
        "parameters": [
          {
            "enum": [
              "web",
              "cli"
            ],
            "type": "string",
            "description": "the login type (\"cli\" or \"web\")",
            "name": "type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "the port number when type=cli",
            "name": "port",
            "in": "query"
          }
        ],
        "responses": {
          "307": {
            "description": "Redirected to /authenticate"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "description": "Log out of the Vela api",
        "produces": [
          "application/json"
        ],
        "tags": [
          "authenticate"
        ],
        "operationId": "GetLogout",
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "schema": {
              "type": "string"
            }
          },
          "503": {
            "description": "Logout did not succeed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "description": "Retrieve metrics from the Vela api",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "base"
        ],
        "operationId": "BaseMetrics",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for user count",
            "name": "user_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for repo count",
            "name": "repo_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for build count",
            "name": "build_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for running build count",
            "name": "running_build_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for pending build count",
            "name": "pending_build_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for queued build count",
            "name": "queued_build_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for failure build count",
            "name": "failure_build_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for killed build count",
            "name": "killed_build_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for success build count",
            "name": "success_build_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for error build count",
            "name": "error_build_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for step image count",
            "name": "step_image_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for step status count",
            "name": "step_status_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for service image count",
            "name": "service_image_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for service status count",
            "name": "service_status_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for total worker build limit",
            "name": "worker_build_limit",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for active worker count",
            "name": "active_worker_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for inactive worker count",
            "name": "inactive_worker_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for idle worker count",
            "name": "idle_worker_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for available worker count",
            "name": "available_worker_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for busy worker count",
            "name": "busy_worker_count",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Indicates a request for error worker count",
            "name": "error_worker_count",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the Vela metrics",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/token-refresh": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "Refresh an access token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "authenticate"
        ],
        "operationId": "GetRefreshAccessToken",
        "responses": {
          "200": {
            "description": "Successfully refreshed a token",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/validate-oauth": {
      "get": {
        "description": "Validate that a user oauth token was created by Vela",
        "produces": [
          "application/json"
        ],
        "tags": [
          "authenticate"
        ],
        "operationId": "ValidateOAuthToken",
        "parameters": [
          {
            "type": "string",
            "description": "OAuth integration user access token\n",
            "name": "Token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully validated",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "401": {
            "description": "Unable to validate",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/validate-token": {
      "get": {
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "description": "Validate a server token",
        "produces": [
          "application/json"
        ],
        "tags": [
          "authenticate"
        ],
        "operationId": "ValidateServerToken",
        "responses": {
          "200": {
            "description": "Successfully validated a token",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "Get the version of the Vela API",
        "produces": [
          "application/json"
        ],
        "tags": [
          "base"
        ],
        "operationId": "Version",
        "responses": {
          "200": {
            "description": "Successfully retrieved the Vela API version",
            "schema": {
              "$ref": "#/definitions/Version"
            }
          }
        }
      }
    },
    "/webhook": {
      "post": {
        "description": "Deliver a webhook to the vela api",
        "produces": [
          "application/json"
        ],
        "tags": [
          "base"
        ],
        "operationId": "PostWebhook",
        "parameters": [
          {
            "description": "Webhook payload that we expect from the user or VCS",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Webhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully received the webhook",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          "400": {
            "description": "Malformed webhook payload",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthenticated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unable to receive the webhook",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unable to receive the webhook",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Build": {
      "title": "Build is the library representation of a build for a pipeline.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "BuildExecutable": {
      "title": "BuildExecutable is the library representation of a BuildExecutable.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "BuildQueue": {
      "title": "BuildQueue is the library representation of the builds in the queue.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Deployment": {
      "title": "Deployment is the library representation of a deployment.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Error": {
      "title": "Error is the json error message from the server for a given http response.",
      "x-go-package": "github.com/go-vela/types"
    },
    "Executor": {
      "title": "Executor is the library representation of an executor for a worker.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Graph": {
      "description": "a node is a pipeline stage and its relevant steps.\nan edge is a relationship between nodes, defined by the 'needs' tag.",
      "title": "Graph contains nodes, and relationships between nodes, or edges.",
      "x-go-package": "github.com/go-vela/server/api/build"
    },
    "Log": {
      "title": "Log is the library representation of a log for a step in a build.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Pipeline": {
      "title": "Pipeline is the library representation of a Pipeline.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "PipelineBuild": {
      "title": "Build is the pipeline representation of a build for a pipeline.",
      "x-go-name": "Build",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineContainer": {
      "description": "Container is the pipeline representation\nof a Container in a pipeline.",
      "x-go-name": "Container",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineContainerSlice": {
      "description": "ContainerSlice is the pipeline representation\nof the Containers block for a pipeline.",
      "x-go-name": "ContainerSlice",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineMetadata": {
      "title": "Metadata is the pipeline representation of the metadata block for a pipeline.",
      "x-go-name": "Metadata",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelinePort": {
      "description": "Port is the pipeline representation\nof a port for a step in a pipeline.",
      "x-go-name": "Port",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineRules": {
      "description": "Rules is the pipeline representation of the ruletypes\nfrom a ruleset block for a step in a pipeline.",
      "x-go-name": "Rules",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineRuleset": {
      "description": "Ruleset is the pipeline representation of\na ruleset block for a step in a pipeline.",
      "x-go-name": "Ruleset",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineRuletype": {
      "description": "Ruletype is the pipeline representation of an element\nfor a ruleset block for a step in a pipeline.",
      "x-go-name": "Ruletype",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineSecret": {
      "description": "Secret is the pipeline representation of a\nsecret from the secrets block for a pipeline.",
      "x-go-name": "Secret",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineSecretSlice": {
      "description": "SecretSlice is the pipeline representation\nof the secrets block for a pipeline.",
      "x-go-name": "SecretSlice",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineStage": {
      "description": "Stage is the pipeline representation\nof a stage in a pipeline.",
      "x-go-name": "Stage",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineStageSlice": {
      "description": "StageSlice is the pipeline representation\nof the stages block for a pipeline.",
      "x-go-name": "StageSlice",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineStepSecret": {
      "description": "StepSecret is the pipeline representation of a secret\nfrom a secrets block for a step in a pipeline.",
      "x-go-name": "StepSecret",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineStepSecretSlice": {
      "description": "StepSecretSlice is the pipeline representation\nof the secrets block for a step in a pipeline.",
      "x-go-name": "StepSecretSlice",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineUlimit": {
      "description": "Ulimit is the pipeline representation of a ulimit\nfrom the ulimits block for a step in a pipeline.",
      "x-go-name": "Ulimit",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineUlimitSlice": {
      "description": "UlimitSlice is the pipeline representation of\nthe ulimits block for a step in a pipeline.",
      "x-go-name": "UlimitSlice",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineVolume": {
      "description": "Volume is the pipeline representation of a volume\nfrom a volumes block for a step in a pipeline.",
      "x-go-name": "Volume",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineVolumeSlice": {
      "description": "VolumeSlice is the pipeline representation of\nthe volumes block for a step in a pipeline.",
      "x-go-name": "VolumeSlice",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "PipelineWorker": {
      "title": "Worker is the yaml representation of the worker block for a pipeline.",
      "x-go-name": "Worker",
      "x-go-package": "github.com/go-vela/types/pipeline"
    },
    "QueueInfo": {
      "title": "QueueInfo is the library representation of a QueueInfo.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Repo": {
      "title": "Repo is the library representation of a repo.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Schedule": {
      "title": "Schedule is the API representation of a schedule for a repo.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Secret": {
      "title": "Secret is the library representation of a secret.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Service": {
      "title": "Service is the library representation of a service in a build.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Step": {
      "title": "Step is the library representation of a step in a build.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Template": {
      "title": "Template is the library representation of a template for a pipeline.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Token": {
      "title": "Token is the library representation of a token response from server.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "User": {
      "title": "User is the library representation of a user.",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Version": {
      "description": "Version represents application information that\nfollows semantic version guidelines from\nhttps://semver.org/.",
      "x-go-package": "github.com/go-vela/types/version"
    },
    "Webhook": {
      "title": "Hook is the library representation of a webhook for a repo.",
      "x-go-name": "Hook",
      "x-go-package": "github.com/go-vela/types/library"
    },
    "Worker": {
      "title": "Worker is the library representation of a worker.",
      "x-go-package": "github.com/go-vela/types/library"
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "description": "Bearer token",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "CookieAuth": {
      "description": "Refresh token sent as cookie (swagger 2.0 doesn't support cookie auth)",
      "type": "apiKey",
      "name": "vela_refresh_token",
      "in": "header"
    }
  }
}
